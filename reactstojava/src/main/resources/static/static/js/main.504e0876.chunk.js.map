{"version":3,"sources":["service/CourseDataService.js","component/ListCoursesComponent.js","component/CourseComponent.js","component/InstructorApp.js","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","name","axios","get","id","delete","course","put","post","ListCoursesComponent","props","useState","courses","setCourses","message","setMessage","useEffect","refreshCourses","CourseDataService","retrieveAllCourses","then","response","console","log","data","sort","a","b","className","map","key","description","onClick","deleteCourse","history","push","CourseComponent","match","params","setDescription","useForm","register","handleSubmit","errors","watch","retrieveCourse","onSubmit","username","table","createCourse","updateCourse","defaultValue","ref","disabled","required","minLength","type","InstructorApp","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.504e0876.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst INSTRUCTOR = 'in28minutes'\r\nconst COURSE_API_URL = 'http://localhost:8080'\r\nconst INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\r\n\r\nclass CourseDataService {\r\n\r\n    retrieveAllCourses(name) {\r\n        return axios.get(`${INSTRUCTOR_API_URL}/courses`);\r\n    }\r\n    deleteCourse(name, id) {\r\n        return axios.delete(`${INSTRUCTOR_API_URL}/courses/${id}`);\r\n    }\r\n    retrieveCourse(name, id) {\r\n        return axios.get(`${INSTRUCTOR_API_URL}/courses/${id}`);\r\n    }\r\n    updateCourse(name, id, course) {\r\n        return axios.put(`${INSTRUCTOR_API_URL}/courses/${id}`, course);\r\n    }\r\n  \r\n    createCourse(name, course) {\r\n        return axios.post(`${INSTRUCTOR_API_URL}/courses/`, course);\r\n    }\r\n}\r\n\r\nexport default new CourseDataService()","import React, { useState, useEffect } from \"react\";\r\nimport CourseDataService from \"../service/CourseDataService\";\r\n\r\nfunction ListCoursesComponent(props) {\r\n  let [courses, setCourses] = useState([]);\r\n  let [message, setMessage] = useState(\"\");\r\n  useEffect(() => {\r\n    refreshCourses();\r\n  }, []);\r\n\r\n  const refreshCourses = () => {\r\n    CourseDataService.retrieveAllCourses(\"in28minutes\") //HARDCODED\r\n      .then(response => {\r\n        console.log(response);\r\n        response.data = response.data.sort(function(a, b) {\r\n          if (a.id > b.id) {\r\n            return 1;\r\n          }\r\n          if (b.id > a.id) {\r\n            return -1;\r\n          }\r\n          return 0;\r\n        });\r\n        setCourses(response.data);\r\n      });\r\n  };\r\n  const deleteCourseClicked = id => {\r\n    CourseDataService.deleteCourse(\"in28minutes\", id).then(response => {\r\n      setMessage(`Delete of course ${id} Successful`);\r\n      refreshCourses();\r\n    });\r\n  };\r\n  const updateCourseClicked = id => {\r\n    props.history.push(`/courses/${id}`);\r\n  };\r\n  const addCourseClicked = () => {\r\n    props.history.push(`/courses/-1`);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <h3>All Courses</h3>\r\n      {message && <div className=\"alert alert-success\">{message}</div>}\r\n\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Id</th>\r\n              <th>Description</th>\r\n              <th>Delete</th>\r\n              <th>Update</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {courses.map(course => (\r\n              <tr key={course.id}>\r\n                <td>{course.id}</td>\r\n                <td>{course.description}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-warning\"\r\n                    onClick={() => {\r\n                      deleteCourseClicked(course.id);\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    onClick={() => updateCourseClicked(course.id)}\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"row\">\r\n          <button className=\"btn btn-success\" onClick={addCourseClicked}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListCoursesComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CourseDataService from \"../service/CourseDataService\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nfunction CourseComponent(props) {\r\n  const [id, setId] = useState(props.match.params.id);\r\n  const [description, setDescription] = useState(\"\");\r\n  const { register, handleSubmit, watch, errors } = useForm();\r\n  const onSubmit = data => {\r\n    let username = \"in28minutes\";\r\n    \r\n    let course = {\r\n        id,\r\n        username,\r\n        description:data.description\r\n    }\r\nconsole.table(course)\r\n    if (id === -1) {\r\n        CourseDataService.createCourse(username, course)\r\n            .then(() => props.history.push('/courses'))\r\n    } else {\r\n        CourseDataService.updateCourse(username, id, course)\r\n            .then(() => props.history.push('/courses'))\r\n    }\r\n\r\n  };\r\n  useEffect(() => {\r\n    if (id == -1) {\r\n      return;\r\n    }\r\n    CourseDataService.retrieveCourse(\"\", id).then(response => {\r\n      setDescription(response.data.description);\r\n    });\r\n  }, []);\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <fieldset className=\"form-group\">\r\n        <label>Id</label>\r\n\r\n        <input\r\n          className=\"form-control\"\r\n          name=\"id\"\r\n          defaultValue={id}\r\n          ref={register}\r\n          disabled\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"form-group\">\r\n        <label>Description</label>\r\n        <input\r\n          className=\"form-control\"\r\n          name=\"description\"\r\n          defaultValue={description}\r\n          ref={register({ required: true, minLength: 6 })}\r\n        />\r\n        {errors.description && <span>This field is required and with a minimum length of 6 characters</span>}\r\n      </fieldset>\r\n      <input className=\"btn btn-success\" type=\"submit\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CourseComponent;\r\n","import React from \"react\";\r\nimport ListCoursesComponent from \"./ListCoursesComponent\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport CourseComponent from \"./CourseComponent\";\r\n\r\nfunction InstructorApp() {\r\n  return (\r\n    <Router>\r\n        <h1>Instructor Application</h1>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={ListCoursesComponent} />\r\n          <Route path=\"/courses\" exact component={ListCoursesComponent} />\r\n          <Route path=\"/courses/:id\" component={CourseComponent} />\r\n        </Switch>{\" \"}\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default InstructorApp;\r\n","import React from 'react';\nimport './App.css';\nimport InstructorApp from './component/InstructorApp';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n       <InstructorApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}